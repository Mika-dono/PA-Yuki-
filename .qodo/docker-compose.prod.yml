version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: aura-postgres
    environment:
      POSTGRES_DB: aura_production
      POSTGRES_USER: aura_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - aura-network

  redis:
    image: redis:7-alpine
    container_name: aura-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aura-network

  aura-api:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: aura-api
    environment:
      - DATABASE_URL=postgresql://aura_user:${DB_PASSWORD}@postgres:5432/aura_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - BLOCKCHAIN_RPC=${BLOCKCHAIN_RPC}
      - MARKET_DATA_API_KEY=${MARKET_DATA_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - aura-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  aura-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: aura-frontend
    ports:
      - "3000:3000"
    depends_on:
      - aura-api
    networks:
      - aura-network

  blockchain-node:
    image: trufflesuite/ganache-cli:latest
    container_name: aura-blockchain
    command: ["-d", "--db", "/data", "-m", "test test test test test test test test test test test junk", "-h", "0.0.0.0"]
    ports:
      - "8545:8545"
    volumes:
      - blockchain_data:/data
    networks:
      - aura-network

  prometheus:
    image: prom/prometheus:latest
    container_name: aura-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aura-network

  grafana:
    image: grafana/grafana:latest
    container_name: aura-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - aura-network

  nginx:
    image: nginx:alpine
    container_name: aura-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - aura-api
      - aura-frontend
    networks:
      - aura-network

volumes:
  postgres_data:
  redis_data:
  blockchain_data:
  prometheus_data:
  grafana_data:

networks:
  aura-network:
    driver: bridge